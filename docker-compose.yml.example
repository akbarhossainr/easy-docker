version: '2'

services:

### Applications Code Container #############################

    applications:
      image: tianon/true
      volumes:
        - ${APPLICATION}:/var/www

### nginx Setup for virtual host ############################################
    nginx:
      build:
        context: ./docker/nginx/
        args:
          - PHP_UPSTREAM=php
      volumes:
        - ./logs/nginx/:/var/log/nginx
        - ./docker/nginx/sites:/etc/nginx/sites-available
      volumes_from:
              - applications
      ports:
        - "80:80"
        - "443:443"
      depends_on:
        - php
      networks:
        - frontend
        - backend

### nginx Setup for single host ############################################

#    nginx:
#        image: nginx:1.13.6
#        ports:
#            - 80:80
#        volumes:
#            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
#        volumes_from:
#            - php

### php Setup ############################################
    php:
        build: ./docker/php/${PHP_VERSION}
        volumes_from:
           - applications
        links:
            - mysql
#           - redis
#           - postgres
        networks:
            - backend

### mysql Setup ############################################

    mysql:
      build:
        context: ./docker/mysql
      environment:
        - MYSQL_DATABASE=${DB_DATABASE}
        - MYSQL_USER=${DB_USERNAME}
        - MYSQL_PASSWORD=${DB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      volumes:
        - ./backup/data/mysql:/var/lib/mysql
        - ./docker/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      ports:
        - "${DB_PORT}:3306"
      networks:
        - backend

### postgres Setup ############################################

    postgres:
        image: postgres:10.1
        ports:
            - 5432:5432
        volumes:
            - ./backup/postgres/database:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        networks:
            - backend

### Adminer Setup ############################################

    adminer:
        image: adminer:4.3.1-standalone
        ports:
          - ${ADMINER_PORT}:8080
        links:
          - mysql
#          - postgres:db
        networks:
          - backend
### Redis Setup ############################################

    redis:
        image: redis:latest
        ports:
          - ${REDEIS_PORT}:6379
        volumes:
          - ./backup/redis/data:/data
        networks:
          - backend

### Mongo Setup ############################################

    mongo:
      image: mongo:3
      ports:
      - 27017:27017
      volumes:
      - ./backup/mongo:/data/db
      networks:
      - backend

### consul Setup ############################################

    consul:
      image: bitnami/consul
      ports:
        - 8500:8500
      volumes:
        - ./backup/consul/data:/bitnami
      networks:
        - backend

### consul Setup ############################################

    rabbit:
      image: "rabbitmq:3-management"
      hostname: "rabbitmq"
      environment:
        RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
        RABBITMQ_DEFAULT_USER: "rabbitmq"
        RABBITMQ_DEFAULT_PASS: "rabbitmq"
        RABBITMQ_DEFAULT_VHOST: "/"
      ports:
        - "15672:15672"
        - "5672:5672"
      labels:
        NAME: "rabbitmq"
      volumes:
        - ./backup/rabbitmq:/var/lib/rabbitmq
        #- "./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins"
        #- "./docker/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
        #- "./docker/rabbitmq/autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
      networks:
        - backend

### Networks Setup ############################################

networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"